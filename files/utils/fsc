                    "function isInteger(n) {" +
                    "    return (typeof n==='number' && n%1==0);" +
                    "}" +
                    
                    "function findMatch(text, regexp) {" +
                    "    var matches=text.match(regexp);" +
                    "    return (matches)?matches[1]:null;" +
                    "}" +

                    " function findSignatureCode(sourceCode) {" + 
                    "    var signatureFunctionName = findMatch(sourceCode, " + 
                    "    /\\.set\\s*\\(\"signature\"\\s*,\\s*([a-zA-Z0-9_$][\\w$]*)\\(/)" +
                    "    || findMatch(sourceCode, " +
                    "    /\\.sig\\s*\\|\\|\\s*([a-zA-Z0-9_$][\\w$]*)\\(/)" +
                    "    || findMatch(sourceCode, " +
                    "    /\\.signature\\s*=\\s*([a-zA-Z_$][\\w$]*)\\([a-zA-Z_$][\\w$]*\\)/);" + 
                    "    signatureFunctionName=signatureFunctionName.replace('$','\\\\$');    " + 
                    "	 var regCode = new RegExp(signatureFunctionName + '\\\\s*=\\\\s*function' +" +
                    "	 '\\\\s*\\\\([\\\\w$]*\\\\)\\\\s*{[\\\\w$]*=[\\\\w$]*\\\\.split\\\\(\"\"\\\\);\\n*(.+);return [\\\\w$]*\\\\.join');" +
                    "	 var regCode2 = new RegExp('function \\\\s*' + signatureFunctionName +" +
                    "	 '\\\\s*\\\\([\\\\w$]*\\\\)\\\\s*{[\\\\w$]*=[\\\\w$]*\\\\.split\\\\(\"\"\\\\);\\n*(.+);return [\\\\w$]*\\\\.join');" +    
                    "	 var functionCode = findMatch(sourceCode, regCode) || findMatch(sourceCode, regCode2);" +
                    "    var reverseFunctionName = findMatch(sourceCode, " + 
                    "    /([\\w$]*)\\s*:\\s*function\\s*\\(\\s*[\\w$]*\\s*\\)\\s*{\\s*(?:return\\s*)?[\\w$]*\\.reverse\\s*\\(\\s*\\)\\s*}/);" + 
                    "    if (reverseFunctionName) reverseFunctionName=reverseFunctionName.replace('$','\\\\$');        " + 
                    "    var sliceFunctionName = findMatch(sourceCode, " + 
                    "    /([\\w$]*)\\s*:\\s*function\\s*\\(\\s*[\\w$]*\\s*,\\s*[\\w$]*\\s*\\)\\s*{\\s*(?:return\\s*)?[\\w$]*\\.(?:slice|splice)\\(.+\\)\\s*}/);" + 
                    "    if (sliceFunctionName) sliceFunctionName=sliceFunctionName.replace('$','\\\\$');    " + 
                    "    " + 
                    "    var regSlice = new RegExp('\\\\.(?:'+'slice'+(sliceFunctionName?'|'+sliceFunctionName:'')+" + 
                    "    ')\\\\s*\\\\(\\\\s*(?:[a-zA-Z_$][\\\\w$]*\\\\s*,)?\\\\s*([0-9]+)\\\\s*\\\\)');" + 
                    "    var regReverse = new RegExp('\\\\.(?:'+'reverse'+(reverseFunctionName?'|'+reverseFunctionName:'')+" + 
                    "    ')\\\\s*\\\\([^\\\\)]*\\\\)');" + 
                    "    var regSwap = new RegExp('[\\\\w$]+\\\\s*\\\\(\\\\s*[\\\\w$]+\\\\s*,\\\\s*([0-9]+)\\\\s*\\\\)');" + 
                    "    var regInline = new RegExp('[\\\\w$]+\\\\[0\\\\]\\\\s*=\\\\s*[\\\\w$]+\\\\[([0-9]+)\\\\s*%\\\\s*[\\\\w$]+\\\\.length\\\\]');" + 
                    "    var functionCodePieces=functionCode.split(';');" + 
                    "    var decodeArray=[], signatureLength=81;" + 
                    "    for (var i=0; i<functionCodePieces.length; i++) {" + 
                    "      functionCodePieces[i]=functionCodePieces[i].trim();" + 
                    "      var codeLine=functionCodePieces[i];" + 
                    "      if (codeLine.length>0) {" + 
                    "        var arrSlice=codeLine.match(regSlice);" + 
                    "        var arrReverse=codeLine.match(regReverse);" + 
                    "        if (arrSlice && arrSlice.length >= 2) {" + 
                    "        var slice=parseInt(arrSlice[1], 10);" + 
                    "        if (isInteger(slice)){ " + 
                    "          decodeArray.push(-slice);" + 
                    "          signatureLength+=slice;" + 
                    "        }" + 
                    "      } else if (arrReverse && arrReverse.length >= 1) {" + 
                    "        decodeArray.push(0);" + 
                    "      } else if (codeLine.indexOf('[0]') >= 0) {" + 
                    "          if (i+2<functionCodePieces.length &&" + 
                    "          functionCodePieces[i+1].indexOf('.length') >= 0 &&" + 
                    "          functionCodePieces[i+1].indexOf('[0]') >= 0) {" + 
                    "            var inline=findMatch(functionCodePieces[i+1], regInline);" + 
                    "            inline=parseInt(inline, 10);" + 
                    "            decodeArray.push(inline);" + 
                    "            i+=2;" + 
                    "          }" + 
                    "      } else if (codeLine.indexOf(',') >= 0) {" + 
                    "        var swap=findMatch(codeLine, regSwap);" + 
                    "        swap=parseInt(swap, 10);" + 
                    "        if (isInteger(swap) && swap>0){" + 
                    "          decodeArray.push(swap);" + 
                    "        }" + 
                    "      }" + 
                    "    }" + 
                    "  }" +
                    "  return decodeArray;" +
                    "}"
